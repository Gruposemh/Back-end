spring.application.name=backend

spring.datasource.url=jdbc:mysql://mysql-1f2f8be9-bondesaniago-5fa5.g.aivencloud.com:17648/ong
spring.datasource.username=avnadmin
spring.datasource.password=AVNS_bYIzEpKLLyMG3ZIviho
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true


# Configurações de Email (configurar com seus dados reais)
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=testeongprobem@gmail.com
spring.mail.password=wdeljthyystygjxz
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# JWT - IMPORTANTE: Definir JWT_SECRET como variável de ambiente em produção
jwt.secret=${JWT_SECRET:minha-chave-secreta-super-secreta-de-256-bits-para-jwt-que-deve-ser-mantida-em-segredo-absoluto-e-nunca-exposta}
jwt.expiration=${JWT_EXPIRATION:3600000}

# OAuth2 Google - CONFIGURAÇÃO CORRIGIDA PARA RESOLVER PROBLEMA DE REDIRECIONAMENTO
spring.security.oauth2.client.registration.google.client-id=750484993221-dnb8ht7k5456jlp4ps5ulcrfo4t6uopd.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.registration.google.client-name=Google

# Configurações adicionais para resolver problema de redirecionamento
server.address=0.0.0.0
server.port=8080

# OAuth2 Provider Google - URLs CORRETAS
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub
spring.security.oauth2.client.provider.google.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs

# Tolerância de diferença de tempo (5 minutos = 300 segundos)
spring.security.oauth2.resourceserver.jwt.clock-skew=300s

# Email adicional
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# Logs detalhados para debug OAuth2
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.web=DEBUG

# Redis Configuration
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.data.redis.timeout=2000ms
spring.data.redis.lettuce.pool.max-active=8
spring.data.redis.lettuce.pool.max-idle=8
spring.data.redis.lettuce.pool.min-idle=0

# Cache Configuration
spring.cache.type=redis
spring.cache.redis.time-to-live=600000
spring.cache.redis.cache-null-values=false

# Rate Limiting Configuration
app.rate-limit.login.max-attempts=5
app.rate-limit.login.window-minutes=60
app.rate-limit.otp.max-attempts=3
app.rate-limit.otp.window-minutes=15
app.rate-limit.email.max-attempts=10
app.rate-limit.email.window-minutes=60

# Enhanced Token Configuration
app.jwt.access-token-expiration=900000
app.jwt.refresh-token-expiration=604800000
app.verification-token.expiration-minutes=15
app.otp.expiration-minutes=5
app.password-reset-token.expiration-minutes=30

# Security Configuration
app.security.cors.allowed-origins=http://localhost:3000,http://127.0.0.1:3000,http://localhost:5500,http://127.0.0.1:5500,http://localhost:8080,http://127.0.0.1:8080
app.security.max-login-attempts=5
app.security.lockout-duration-minutes=60

# Email Configuration for Development
app.email.enabled=true
app.email.mock-mode=false

# Logging Configuration
logging.level.com.ong.backend.services.EmailService=INFO
logging.level.com.ong.backend=DEBUG

# Aumentar tolerância de diferença de tempo (60 segundos)
spring.security.oauth2.client.provider.google.clock-skew=60s